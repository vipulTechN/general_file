 <!-- pagination and jump script for table start-->
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const rowSelector = document.getElementById('rowSelector');
            const rows = document.querySelectorAll('#myTable tbody tr');
            const prevButton = document.getElementById('prevButton');
            const nextButton = document.getElementById('nextButton');
            const pageNumbersContainer = document.getElementById('pageNumbers');
            const jumpToPageInput = document.getElementById('jumpToPageInput');
            const jumpButton = document.getElementById('jumpButton');
            const rowInfo = document.getElementById('rowInfo');
            const searchInput = document.getElementById('searchInput');
            let currentPage = 1;
            let rowsPerPage = parseInt(rowSelector.value, 10);
            let totalPages;
    
            // Function to display rows based on selected rows per page and filtered rows
            function displayRows(filteredRows = rows) {
                const totalRows = filteredRows.length; // Get the total number of filtered rows
                totalPages = Math.ceil(totalRows / rowsPerPage);
    
                // Hide all rows
                rows.forEach(row => {
                    row.style.display = 'none';
                });
    
                // Calculate the starting and ending index for the current page
                const start = (currentPage - 1) * rowsPerPage;
                const end = start + rowsPerPage;
    
                // Show rows for the current page
                for (let i = start; i < end && i < totalRows; i++) {
                    filteredRows[i].style.display = ''; // Show each row based on the selection
                }
    
                // Show the row info (Showing X to Y of Z entries, filtered)
                const showingStart = start + 1;
                const showingEnd = Math.min(end, totalRows);
                const totalOriginalRows = rows.length;
                rowInfo.innerText = `Showing ${showingStart} to ${showingEnd} of ${totalRows} ${totalRows === totalOriginalRows ? 'entries' : `(filtered from ${totalOriginalRows} total entries)`}`;
    
                // Update pagination buttons and jump input limits
                updatePagination(totalPages);
            }
    
            // Function to filter table rows based on search input
            function filterTable() {
                const filter = searchInput.value.toLowerCase();
                const filteredRows = Array.from(rows).filter(row => {
                    return row.innerText.toLowerCase().includes(filter);
                });
    
                currentPage = 1; // Reset to first page when filtering
                displayRows(filteredRows); // Display the filtered rows
            }
    
            // Function to update pagination buttons
            function updatePagination(totalPages) {
                pageNumbersContainer.innerHTML = ''; // Clear existing page numbers
    
                // Enable/disable buttons
                prevButton.disabled = currentPage === 1;
                nextButton.disabled = currentPage === totalPages || totalPages === 0;
    
                // Display page numbers
                const maxVisiblePages = 3;
                let startPage, endPage;
    
                if (totalPages <= maxVisiblePages) {
                    startPage = 1;
                    endPage = totalPages;
                } else {
                    if (currentPage <= 3) {
                        startPage = 1;
                        endPage = maxVisiblePages;
                    } else if (currentPage + 1 >= totalPages) {
                        startPage = totalPages - maxVisiblePages + 1;
                        endPage = totalPages;
                    } else {
                        startPage = currentPage - 2;
                        endPage = currentPage + 2;
                    }
                }
    
                // Add page buttons
                for (let i = startPage; i <= endPage; i++) {
                    const button = document.createElement('button');
                    button.innerText = i;
                    button.className = i === currentPage ? 'active' : '';
                    button.addEventListener('click', function () {
                        currentPage = i;
                        displayRows(); // Display the filtered rows (pass them again)
                    });
                    pageNumbersContainer.appendChild(button);
                }
            }
    
            // Event listener for rows per page selector
            rowSelector.addEventListener('change', function () {
                rowsPerPage = parseInt(this.value, 10);
                currentPage = 1; // Reset to first page
                displayRows(); // Redisplay rows with the new rows per page setting
            });
    
            // Event listener for previous button
            prevButton.addEventListener('click', function () {
                if (currentPage > 1) {
                    currentPage--;
                    displayRows(); // Redisplay rows for the new page
                }
            });
    
            // Event listener for next button
            nextButton.addEventListener('click', function () {
                if (currentPage < totalPages) {
                    currentPage++;
                    displayRows(); // Redisplay rows for the new page
                }
            });
    
            // Event listener for Jump to Page button
            jumpButton.addEventListener('click', function () {
                const pageNumber = parseInt(jumpToPageInput.value, 10);
                if (pageNumber >= 1 && pageNumber <= totalPages) {
                    currentPage = pageNumber;
                    displayRows(); // Redisplay rows for the new page
                } else {
                    alert('Please enter a valid page number.');
                }
            });
    
            // Event listener for search input
            searchInput.addEventListener('keyup', filterTable);
    
            // Initial display of rows
            displayRows();
        });
    </script>

    <!-- row selector script for table start-->
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const rowSelector = document.getElementById('rowSelector');
            const rows = document.querySelectorAll('#myTable tbody tr');

            rowSelector.addEventListener('change', function () {
                const selectedValue = rowSelector.value;
                let visibleCount;

                if (selectedValue === 'all') {
                    visibleCount = rows.length;
                } else {
                    visibleCount = parseInt(selectedValue, 10);
                }

                rows.forEach(row => {
                    row.style.display = 'none';
                });

                for (let i = 0; i < visibleCount && i < rows.length; i++) {
                    rows[i].style.display = ''; 
                }
            });

            rowSelector.dispatchEvent(new Event('change'));
        });
    </script>