1. basehome
2. index
3. about
4. bloglist
5. buildcommi
6. career
7. contact
8. dashboard
9. deleteproperty
10. faq
11. homedecor
12. homeloan
13. legal
14. pg edit
15. pg property det
16. pg submit
17. privacy policy
18. propertydetail
19. popertylist
20. property management
21. rental submit
22. rental property detail
23. select choice
24. terms
25. testimonial
26. user_login


.label {
    margin: 30px 0px;
}

.locationinput {
    display: flex;
    justify-content: space-evenly;
}
.locationinput img {
    width: 100px;
    height: 100px;
}

.hidden { 
      display: none;
    }

    .error {
     border: 1px solid red;
    }

    .error-message {
        color: red;
        font-size: 0.9em;
    }

    .success-message {
        color: green;
        font-size: 0.9em;
    }

    .addrembtn{
        display: flex;
        align-items: center;
    }

    .addrembtn button{
        border: none;
        border-radius: 10px;
        color: white;
        padding: 3px 20px;
        margin-top: 12px;
        font-size: 10px;
    }

    #add-button{
        background-color: green;
    }

    #remove-button{
        background-color: red;
    }

    .field{
        margin-top: 20px;
    }

<p class="error-message hidden" id="error-message">Please check the image size or upload an image below 500KB.</p>
<p class="success-message hidden" id="success-message">Looks Good</p>
<div class="addrembtn">
 <button id="add-button" type="button">+ Add image</button>
 <button id="remove-button" class="hidden" type="button">- Remove image</button>
</div>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const addButton = document.getElementById("add-button");
    const removeButton = document.getElementById("remove-button");
    const errorMessage = document.getElementById("error-message");
    const successMessage = document.getElementById("success-message");
    let currentUpload = 1;
  
    const handleFileChange = (event) => {
      const fileInput = event.target;
      document.querySelectorAll('.success').forEach(input => input.classList.remove("success"));
  
      if (fileInput.files[0].size <= 512000) {
        fileInput.classList.remove("error");
        errorMessage.classList.add("hidden");
        successMessage.classList.remove("hidden");
        fileInput.classList.add("success");
        checkInputsVisibility();
      } else {
        fileInput.classList.add("error");
        errorMessage.classList.remove("hidden");
        successMessage.classList.add("hidden");
      }
    };
  
    const addNextUploadField = () => {
      const currentFileInput = document.getElementById(`id_images-${currentUpload - 1}-image`);
  
      if (currentFileInput.files.length > 0 && currentFileInput.files[0].size <= 512000) {
        const nextUpload = currentUpload + 1;
        if (nextUpload <= 5) {
          document.getElementById(`upload-${nextUpload}`).classList.remove("hidden");
          currentUpload = nextUpload;
          removeButton.classList.remove("hidden");
        }
        toggleAddButton();
        errorMessage.classList.add("hidden");
        successMessage.classList.add("hidden");
      } else {
        currentFileInput.classList.add("error");
        errorMessage.classList.remove("hidden");
        successMessage.classList.add("hidden");
      }
    };
  
    const removeLastUploadField = () => {
      if (currentUpload > 1) {
        const lastUploadField = document.getElementById(`id_images-${currentUpload - 1}-image`);
        lastUploadField.value = "";
        lastUploadField.classList.remove("error");
        lastUploadField.classList.remove("success");
        currentUpload--;
        document.getElementById(`upload-${currentUpload + 1}`).classList.add("hidden");
        if (currentUpload === 1) {
          removeButton.classList.add("hidden");
        }
        toggleAddButton();
        errorMessage.classList.add("hidden");
        successMessage.classList.add("hidden");
      }
    };
  
    const toggleAddButton = () => {
      if (currentUpload < 5) {
        addButton.classList.remove("hidden");
      } else {
        addButton.classList.add("hidden");
      }
    };
  
    const checkInputsVisibility = () => {
      for (let i = 0; i < 5; i++) {
        const uploadField = document.getElementById(`upload-${i + 1}`);
        const fileInput = document.getElementById(`id_images-${i}-image`);
  
        if (fileInput.files.length > 0 || fileInput.previousElementSibling.tagName === "IMG") {
          uploadField.classList.remove("hidden");
        } else {
          uploadField.classList.add("hidden");
        }
      }
    };
  
    for (let i = 0; i < 5; i++) {
      document.getElementById(`id_images-${i}-image`).addEventListener("change", handleFileChange);
    }
  
    addButton.addEventListener("click", addNextUploadField);
    removeButton.addEventListener("click", removeLastUploadField);
    checkInputsVisibility();
  });
</script>


//length of all models 
project_society_name = models.CharField(max_length=100, null=True, blank=True)
    project_cover_img = models.ImageField(upload_to='property_images/', blank=True, null=True)
    def get_cover_img_url(self):
        if self.project_cover_img and hasattr(self.project_cover_img, 'url'):
            return self.project_cover_img.url
        else:
            return None  # Or return a default image URL or handle the case as per your requirement
    apartment_type = models.CharField(max_length=60, choices=APARTMENT_TYPE_CHOICES, null=True, blank=True)
    apartment_type_bhk = models.CharField(max_length=60, choices=APARTMENT_TYPE_BHK, null=True, blank=True)
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, null=True, blank=True)
    super_area = models.CharField(max_length=30, null=True, blank=True)
    carpet_area = models.CharField(max_length=30, null=True, blank=True)
    furnished_status = models.CharField(max_length=20, choices=FURNISHED_STATUS_CHOICES, null=True, blank=True)
    approval_status = models.CharField(max_length=60, null=True, blank=True)
    project_city = models.CharField(max_length=60, choices=PROPERTY_CITY, default='allindia')
    possession_date = models.DateField(blank=True, null=True)
    address = models.CharField(max_length=255, verbose_name='Address', null=True, blank=True)
    landmark = models.CharField(max_length=100, verbose_name='Landmark', null=True, blank=True)
    total_floors = models.PositiveSmallIntegerField(null=True, blank=True)
    floor_number = models.PositiveSmallIntegerField(default=0, null=True, blank=True)
    total_units = models.PositiveSmallIntegerField(null=True, blank=True)
    development_area = models.CharField(max_length=30, null=True, blank=True)
    no_of_tower = models.PositiveSmallIntegerField(null=True, blank=True)
    project_rera_id = models.CharField(max_length=100, null=True, blank=True)
    car_parking = models.CharField(max_length=20, choices=PARKING, null=True, blank=True)
    property_price = models.CharField(max_length=30, null=True, blank=True)
    builder_name = models.CharField(max_length=100, null=True, blank=True)
    bedrooms = models.CharField(max_length=20, choices=BEDROOM_COUNT, null=True, blank=True)
    balconies = models.CharField(max_length=20, choices=BALCONY_COUNT, null=True, blank=True)
    bathrooms = models.CharField(max_length=20, choices=BATHROOM_COUNT, null=True, blank=True)
    lifts = models.CharField(max_length=30, choices=LIFT_TYPE, null=True, blank=True)
    facing = models.CharField(max_length=30, null=True, blank=True)
    age_of_construction = models.CharField(max_length=100, null=True, blank=True)
    about_project = models.TextField(max_length=300, null=True, blank=True)
